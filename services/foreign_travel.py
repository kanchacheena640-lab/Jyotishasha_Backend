from typing import Dict, List

def build_foreign_travel(kundali_data: Dict, lang: str = "en") -> Dict:
    SIGNS = [
        "Aries", "Taurus", "Gemini", "Cancer", "Leo", "Virgo",
        "Libra", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces"
    ]
    SIGNS_HI = {
        "Aries": "‡§Æ‡•á‡§∑", "Taurus": "‡§µ‡•É‡§∑‡§≠", "Gemini": "‡§Æ‡§ø‡§•‡•Å‡§®", "Cancer": "‡§ï‡§∞‡•ç‡§ï", "Leo": "‡§∏‡§ø‡§Ç‡§π", "Virgo": "‡§ï‡§®‡•ç‡§Ø‡§æ",
        "Libra": "‡§§‡•Å‡§≤‡§æ", "Scorpio": "‡§µ‡•É‡§∂‡•ç‡§ö‡§ø‡§ï", "Sagittarius": "‡§ß‡§®‡•Å", "Capricorn": "‡§Æ‡§ï‡§∞", "Aquarius": "‡§ï‡•Å‡§Ç‡§≠", "Pisces": "‡§Æ‡•Ä‡§®"
    }
    PLANET_HI = {
        "Sun": "‡§∏‡•Ç‡§∞‡•ç‡§Ø", "Moon": "‡§ö‡§Ç‡§¶‡•ç‡§∞", "Mars": "‡§Æ‡§Ç‡§ó‡§≤", "Mercury": "‡§¨‡•Å‡§ß",
        "Jupiter": "‡§ó‡•Å‡§∞‡•Å", "Venus": "‡§∂‡•Å‡§ï‡•ç‡§∞", "Saturn": "‡§∂‡§®‡§ø", "Rahu": "‡§∞‡§æ‡§π‡•Å", "Ketu": "‡§ï‡•á‡§§‡•Å"
    }
    SIGN_LORDS = {
        "Aries": "Mars", "Taurus": "Venus", "Gemini": "Mercury", "Cancer": "Moon", "Leo": "Sun",
        "Virgo": "Mercury", "Libra": "Venus", "Scorpio": "Mars", "Sagittarius": "Jupiter",
        "Capricorn": "Saturn", "Aquarius": "Saturn", "Pisces": "Jupiter"
    }
    POSITIVE_PLANETS = ["Jupiter", "Moon", "Venus", "Mercury"]
    NEGATIVE_PLANETS = ["Mars", "Saturn", "Rahu", "Ketu", "Sun"]

    def get_hi(val): return PLANET_HI.get(val, val)
    def get_sign_hi(val): return SIGNS_HI.get(val, val)
    def wrap_point(en, hi): return {"en": en, "hi": hi}

    positive_points = []
    negative_points = []
    seen = set()

    planets = kundali_data.get("planets", [])
    house_map = {p["name"]: p["house"] for p in planets}

    # --------- STEP 1: House Lords from Lagna ----------
    lagna_sign = kundali_data.get("lagna_sign")
    if lagna_sign not in SIGNS:
        lagna_index = 0
    else:
        lagna_index = SIGNS.index(lagna_sign)

    for house_num in [9, 12]:
        rashi_index = (lagna_index + house_num - 1) % 12
        house_sign = SIGNS[rashi_index]
        house_sign_hi = get_sign_hi(house_sign)
        lord = SIGN_LORDS.get(house_sign)
        lord_house = house_map.get(lord)

        if not lord or not lord_house:
            continue

        if house_num == 12 and lord_house == 12:
            en = f"12th house lord {lord} is in its own house ‚Äî supports foreign travel."
            hi = f"‡§¶‡•ç‡§µ‡§æ‡§¶‡§∂ ‡§≠‡§æ‡§µ ‡§ï‡•á ‡§∏‡•ç‡§µ‡§æ‡§Æ‡•Ä {get_hi(lord)} ‡§∏‡•ç‡§µ‡§Ø‡§Ç ‡§ï‡•á ‡§≠‡§æ‡§µ ({get_sign_hi(house_sign)}) ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§•‡§ø‡§§ ‡§π‡•à‡§Ç ‚Äî ‡§µ‡§ø‡§¶‡•á‡§∂ ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡•ã ‡§∏‡§Æ‡§∞‡•ç‡§•‡§®‡•§"
            positive_points.append(wrap_point(en, hi))
        elif lord_house in [6, 8, 12]:
            en = f"{house_num}th house lord {lord} is in {lord_house}th house ‚Äî may bring obstacles."
            hi = f"{house_num}‡§µ‡•á‡§Ç ‡§≠‡§æ‡§µ ‡§ï‡•á ‡§∏‡•ç‡§µ‡§æ‡§Æ‡•Ä {get_hi(lord)} {lord_house}‡§µ‡•á‡§Ç ‡§≠‡§æ‡§µ ‡§Æ‡•á‡§Ç ‡§π‡•à‡§Ç ‚Äî ‡§¨‡§æ‡§ß‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§∏‡§Ç‡§ï‡•á‡§§‡•§"
            negative_points.append(wrap_point(en, hi))
        else:
            en = f"{house_num}th house lord {lord} is placed in {lord_house}th house."
            hi = f"{house_num}‡§µ‡•á‡§Ç ‡§≠‡§æ‡§µ ‡§ï‡•á ‡§∏‡•ç‡§µ‡§æ‡§Æ‡•Ä {get_hi(lord)} {lord_house}‡§µ‡•á‡§Ç ‡§≠‡§æ‡§µ ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§•‡§ø‡§§ ‡§π‡•à‡§Ç‡•§"
            positive_points.append(wrap_point(en, hi))

    # --------- STEP 2: Planets in 9th or 12th ----------
    for p in planets:
        name, house = p["name"], p["house"]
        if house in [9, 12] and name not in seen:
            seen.add(name)
            if name in POSITIVE_PLANETS:
                en = f"{name} is placed in {house}th house ‚Äî favorable for foreign travel."
                hi = f"{get_hi(name)} {house}‡§µ‡•á‡§Ç ‡§≠‡§æ‡§µ ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§•‡§ø‡§§ ‡§π‡•à ‚Äî ‡§µ‡§ø‡§¶‡•á‡§∂ ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡•§"
                positive_points.append(wrap_point(en, hi))
            elif name in NEGATIVE_PLANETS:
                en = f"{name} is placed in {house}th house ‚Äî may cause delays or restrictions."
                hi = f"{get_hi(name)} {house}‡§µ‡•á‡§Ç ‡§≠‡§æ‡§µ ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§•‡§ø‡§§ ‡§π‡•à ‚Äî ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§ß‡§æ ‡§°‡§æ‡§≤ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§"
                negative_points.append(wrap_point(en, hi))

    # --------- STEP 3: Aspects (Traditional Drishti) ----------
    for p in planets:
        name, house = p["name"], p["house"]
        if name in seen:
            continue

        aspects = []
        if name == "Mars":
            aspects = [(house+4-1)%12, (house+7-1)%12, (house+8-1)%12]
        elif name == "Saturn":
            aspects = [(house+3-1)%12, (house+7-1)%12, (house+10-1)%12]
        elif name == "Jupiter":
            aspects = [(house+5-1)%12, (house+7-1)%12, (house+9-1)%12]
        else:
            aspects = [(house+7-1)%12]

        for asp in aspects:
            if asp in [9, 12]:
                seen.add(name)
                if name in POSITIVE_PLANETS:
                    en = f"{name} aspects {asp}th house ‚Äî supportive influence."
                    hi = f"{get_hi(name)} ‡§ï‡•Ä ‡§¶‡•É‡§∑‡•ç‡§ü‡§ø {asp}‡§µ‡•á‡§Ç ‡§≠‡§æ‡§µ ‡§™‡§∞ ‡§π‡•à ‚Äî ‡§∏‡§π‡§Ø‡•ã‡§ó‡•Ä ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡•§"
                    positive_points.append(wrap_point(en, hi))
                elif name in NEGATIVE_PLANETS:
                    en = f"{name} aspects {asp}th house ‚Äî may obstruct foreign travel."
                    hi = f"{get_hi(name)} ‡§ï‡•Ä ‡§¶‡•É‡§∑‡•ç‡§ü‡§ø {asp}‡§µ‡•á‡§Ç ‡§≠‡§æ‡§µ ‡§™‡§∞ ‡§π‡•à ‚Äî ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§ß‡§æ ‡§∏‡§Ç‡§≠‡§µ‡•§"
                    negative_points.append(wrap_point(en, hi))

    # --------- Fallback if all blank ----------
    if not positive_points:
        en = "Some yogas related to foreign travel are definitely visible in your chart. However, how strong these possibilities are depends on current Dasha and planetary transit."
        hi = "‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§¶‡•á‡§∂ ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•á ‡§ï‡•Å‡§õ ‡§Ø‡•ã‡§ó ‡§Ö‡§µ‡§∂‡•ç‡§Ø ‡§¶‡§ø‡§ñ‡§æ‡§à ‡§¶‡•á ‡§∞‡§π‡•á ‡§π‡•à‡§Ç, ‡§≤‡•á‡§ï‡§ø‡§® ‡§Ø‡•á ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ‡§è‡§Ç ‡§ï‡§ø‡§§‡§®‡•Ä ‡§™‡•ç‡§∞‡§¨‡§≤ ‡§π‡•à‡§Ç, ‡§Ø‡§π ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§ó‡•ç‡§∞‡§π ‡§¶‡§∂‡§æ ‡§î‡§∞ ‡§ó‡•ã‡§ö‡§∞ ‡§™‡§∞ ‡§®‡§ø‡§∞‡•ç‡§≠‡§∞ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"
        positive_points.append(wrap_point(en, hi))


    heading = "Foreign Travel Insight" if lang == "en" else "‡§µ‡§ø‡§¶‡•á‡§∂ ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§¶‡•É‡§∑‡•ç‡§ü‡§ø‡§ï‡•ã‡§£"
    cta = "üåç Combinations are forming. Final result depends on Dasha & Transit." if lang == "en" else "üåç ‡§ï‡•Å‡§õ ‡§Ø‡•ã‡§ó ‡§¨‡§® ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§ ‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§¶‡§∂‡§æ ‡§î‡§∞ ‡§ó‡•ã‡§ö‡§∞ ‡§™‡§∞ ‡§®‡§ø‡§∞‡•ç‡§≠‡§∞ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"
    dominant = "Jupiter, Rahu, 9th & 12th Houses" if lang == "en" else "‡§ó‡•Å‡§∞‡•Å, ‡§∞‡§æ‡§π‡•Å, ‡§®‡§µ‡§Æ ‡§î‡§∞ ‡§¶‡•ç‡§µ‡§æ‡§¶‡§∂ ‡§≠‡§æ‡§µ"

    return {
        "tool_id": "foreign-travel",
        "language": lang,
        "heading": heading,
        "cta": cta,
        "dominant_influence": dominant,
        "positive_points": positive_points[:4],
        "negative_points": negative_points[:4]
    }
